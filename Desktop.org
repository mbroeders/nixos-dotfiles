#+TITLE: Desktop Environment Literal Configuration File
#+PROPERTY: header-args :mkdirp yes
#+PROPERTY: header-args:sh   :tangle-mode (identity #o555)
#+PROPERTY: header-args:conf :tangle-mode (identity #o555)

* TODO System Settings

Load system-specific settings from =.emacs.d/per-system-settings.el= and unpack relevant values into blocks so that they can be used in configuration file blocks. These settings are configured in [[file:Systems.org::*Per-System Settings][Systems.org]].

*DPI*

#+NAME: dpi
#+begin_src emacs-lisp
  (if (string= (system-name) "wheeler")
      (* 1024 180) ;; Wheeler/laptop
      (* 1024 96)) ;; Hopper/desktop
#+end_src

* Fonts and Themes

I use [[https://github.com/derat/xsettingsd][xsettingsd]] as a minimal settings daemon for Xorg applications. It replaces similar daemons from desktop environments like GNOME and XFCE and enables me to use a simple configuration file like the following:

*.config/xsettingsd/xsettingsd.conf:*

#+begin_src conf :tangle .config/xsettingsd/xsettingsd.conf :noweb yes

Net/ThemeName "Matcha-dark-azul"
Net/IconThemeName "Papirus-Dark"
Gtk/DecorationLayout "menu:minimize,maximize,close"
Gtk/FontName "Cantarell 6"
Gtk/MonospaceFontName "Fira Mono 5"
Gtk/CursorThemeName "Adwaita"
Xft/Antialias 1
Xft/Hinting 0
Xft/HintStyle "hintnone"
Xft/DPI <<dpi()>> # 1024 * DPI

#+end_src

*Arch Packages*

Make sure to install:

- xsettingsd
- ttf-fira-code
- cantarell-fonts
- ttf-jetbrains-mono
- ttc-iosevka-aile
- ttf-font-awesome (not necessary)
- *AUR* ttf-material-design-icons

* Window Management

For window management I use the fantastic Emacs Window Manager [[https://github.com/ch11ng/exwm][EXWM]]. For more information, the [[https://github.com/ch11ng/exwm/wiki][Wiki]] is a good place to start. The configuration is written to a seperate package in my emacs.d lisp directory. Make sure =exwm= gets loaded early. All the Desktop configuration goes into a seperate file: =~/.emacs.d/lisp/mb-desktop.el=. I'll add this file to the load path at the end. Note, I copied the code from =David Wilson=, but simplified it based upon the great [[https://github.com/daviwil/emacs-from-scratch/][Emacs From Scratch]] series.

** Helper functions

First, we define a set of helper functions. These can be used to easily create keybindings, customize window placement and more.

#+begin_src emacs-lisp :tangle .emacs.d/lisp/mb-desktop.el

  (defun efs/run-in-background (command)
    (let ((command-parts (split-string command "[ ]+")))
      (apply #'call-process `(,(car command-parts) nil 0 nil ,@(cdr command-parts)))))

  ;; This function takes the name of the wallpaper, defined in Systems.org, and sets the
  ;; correct wallpaper. You could also just write a fixed path here.
  (defun efs/set-wallpaper ()
    (interactive)
    (start-process-shell-command
     "feh" nil
     (format "feh --bg-scale ~/.dotfiles/backgrounds/samuel-ferrara-uOi3lg8fGl4-unsplash.jpg")))

  (defun efs/bind-function (key invocation &rest bindings)
    "Bind KEYs to FUNCTIONs globally"
    (while key
      (exwm-input-set-key (kbd key)
                          `(lambda ()
                             (interactive)
                             (funcall ',invocation)))
      (setq key (pop bindings)
            invocation (pop bindings))))

  (defun efs/bind-command (key command &rest bindings)
    "Bind KEYs to COMMANDs globally"
    (while key
      (exwm-input-set-key (kbd key)
                          `(lambda ()
                             (interactive)
                             (efs/run-in-background ,command)))
      (setq key (pop bindings)
            command (pop bindings))))

  (defun efs/exwm-init-hook ()
    ;; Make workspace 1 be the one where we land at startup
    (exwm-workspace-switch-create 1)

    ;; Open eshell by default
    (eshell)

    ;; NOTE: The next two are disabled because we now use Polybar!

    ;; Show battery status in the mode line
    ;;(display-battery-mode 1)

    ;; Show the time and date in modeline
    ;;(setq display-time-day-and-date t)
    ;;(display-time-mode 1)
    ;; Also take a look at display-time-format and format-time-string

    ;; Start the Polybar panel
    (efs/start-panel)

    ;; Launch apps that will run in the background
    (efs/run-in-background "dunst")
    (when (string= (system-name) "wheeler")
      (efs/run-in-background "nm-applet"))
    (efs/run-in-background "udiskie -t"))
  ;; (efs/run-in-background "syncthing-gtk --minimized"))

  (defun efs/exwm-update-class ()
    (exwm-workspace-rename-buffer exwm-class-name))

  (defun efs/exwm-update-title ()
    (pcase exwm-class-name
      ("Qutebrowser" (exwm-workspace-rename-buffer (format "QB: %s" exwm-title)))))

  ;; This function isn't currently used, only serves as an example how to
  ;; position a window
  (defun efs/position-window ()
    (let* ((pos (frame-position))
           (pos-x (car pos))
           (pos-y (cdr pos)))

      (exwm-floating-move (- pos-x) (- pos-y))))

  (defun efs/configure-window-by-class ()
    (interactive)
    (pcase exwm-class-name
      ("Qutebrowser" (exwm-workspace-move-window 2))
      ("Spotify"     (exwm-workspace-move-window 4))
      ("mpv"         (exwm-floating-toggle-floating)
       (exwm-layout-toggle-mode-line))))

#+end_src

***** Desktop Configuration

#+begin_src emacs-lisp :tangle .emacs.d/lisp/mb-desktop.el

  (use-package exwm
    :config
    ;; Set the default number of workspaces
    (setq exwm-workspace-number 5)

    ;; When window "class" updates, use it to set the buffer name
    (add-hook 'exwm-update-class-hook #'efs/exwm-update-class)

    ;; When window title updates, use it to set the buffer name
    (add-hook 'exwm-update-title-hook #'efs/exwm-update-title)

    ;; Configure windows as they're created
    (add-hook 'exwm-manage-finish-hook
              (lambda ()
                (efs/configure-window-by-class)

                ;; Hide the modeline on all X windows
                (exwm-layout-hide-mode-line)))

    ;; When EXWM starts up, do some extra confifuration
    (add-hook 'exwm-init-hook #'efs/exwm-init-hook)

    ;; NOTE: Uncomment the following two options if you want window buffers
    ;;       to be available on all workspaces!

    ;; Automatically move EXWM buffer to current workspace when selected
    ;; (setq exwm-layout-show-all-buffers t)

    ;; Display all EXWM buffers in every workspace buffer list
    ;; (setq exwm-workspace-show-all-buffers t)

    ;; NOTE: Uncomment this option if you want to detach the minibuffer!
    ;; Detach the minibuffer (show it with exwm-workspace-toggle-minibuffer)
    ;;(setq exwm-workspace-minibuffer-position 'top)

    ;; Set the screen resolution (update this to be the correct resolution for your screen!)
    ;; (require 'exwm-randr)
    ;; (exwm-randr-enable)
    ;; (start-process-shell-command "xrandr" nil "xrandr --output Virtual-1 --primary --mode 2048x1152 --pos 0x0 --rotate normal")

    ;; This will need to be updated to the name of a display!  You can find
    ;; the names of your displays by looking at arandr or the output of xrandr
    ;; (setq exwm-randr-workspace-monitor-plist '(2 "Virtual-2" 3 "Virtual-2"))

    ;; NOTE: Uncomment these lines after setting up autorandr!
    ;; React to display connectivity changes, do initial display update
    ;; (add-hook 'exwm-randr-screen-change-hook #'efs/update-displays)
    ;; (efs/update-displays)

    ;; Set the wallpaper after changing the resolution
    (efs/set-wallpaper)

    ;; NOTE: This is disabled because we now use Polybar!
    ;; Load the system tray before exwm-init
    ;; (require 'exwm-systemtray)
    ;; (setq exwm-systemtray-height 32)
    ;; (exwm-systemtray-enable)

    ;; Automatically send the mouse cursor to the selected workspace's display
    (setq exwm-workspace-warp-cursor t)

    ;; Window focus should follow the mouse pointer
    (setq mouse-autoselect-window t
          focus-follows-mouse t)

    ;; These keys should always pass through to Emacs
    (setq exwm-input-prefix-keys
          '(?\C-x
            ?\C-u
            ?\C-h
            ?\M-x
            ?\M-`
            ?\M-&
            ?\M-:
            ?\C-\M-j  ;; Buffer list
            ?\C-\ ))  ;; Ctrl+Space

    ;; Ctrl+Q will enable the next key to be sent directly
    (define-key exwm-mode-map [?\C-q] 'exwm-input-send-next-key)

    ;; Run Qutebrowser on window 2
    (defun efs/run-qute ()
      (efs/run-in-background "qutebrowser")
      (exwm-workspace-switch-create 2))

    ;; Run Qutebrowser with META-O
    ;; Kill buffer with META-q
    (efs/bind-function
     "s-o" 'efs/run-qute
     "s-q" 'kill-buffer)

    (efs/bind-command
     "s-p" "playerctl play-pause"
     "s-[" "playerctl previous"
     "s-]" "playerctl next")

    ;;  ;; Use hydra for some nice window resizing
    ;;  (defhydra hydra-exwm-move-resize (:timeout 4)
    ;;  "Move/Resize Window (Shift is bigger steps, Ctrl moves window)"
    ;;  ("j" (lambda () (interactive) (exwm-layout-enlarge-window 10)) "V 10")
    ;;  ("J" (lambda () (interactive) (exwm-layout-enlarge-window 30)) "V 30")
    ;;  ("k" (lambda () (interactive) (exwm-layout-shrink-window 10)) "^ 10")
    ;;  ("K" (lambda () (interactive) (exwm-layout-shrink-window 30)) "^ 30")
    ;;  ("h" (lambda () (interactive) (exwm-layout-shrink-window-horizontally 10)) "< 10")
    ;;  ("H" (lambda () (interactive) (exwm-layout-shrink-window-horizontally 30)) "< 30")
    ;;  ("l" (lambda () (interactive) (exwm-layout-enlarge-window-horizontally 10)) "> 10")
    ;;  ("L" (lambda () (interactive) (exwm-layout-enlarge-window-horizontally 30)) "> 30")
    ;;  ("C-j" (lambda () (interactive) (exwm-floating-move 0 10)) "V 10")
    ;;  ("C-S-j" (lambda () (interactive) (exwm-floating-move 0 30)) "V 30")
    ;;  ("C-k" (lambda () (interactive) (exwm-floating-move 0 -10)) "^ 10")
    ;;  ("C-S-k" (lambda () (interactive) (exwm-floating-move 0 -30)) "^ 30")
    ;;  ("C-h" (lambda () (interactive) (exwm-floating-move -10 0)) "< 10")
    ;;  ("C-S-h" (lambda () (interactive) (exwm-floating-move -30 0)) "< 30")
    ;;  ("C-l" (lambda () (interactive) (exwm-floating-move 10 0)) "> 10")
    ;;  ("C-S-l" (lambda () (interactive) (exwm-floating-move 30 0)) "> 30")
    ;;  ("f" nil "finished" :exit t))

    ;; ;; Set up global key bindings.  These always work, no matter the input state!
    ;; Keep in mind that changing this list after EXWM initializes has no effect.
    (setq exwm-input-global-keys
          `(
            ;; Reset to line-mode (C-c C-k switches to char-mode via exwm-input-release-keyboard)
            ([?\s-\C-r] . exwm-reset)
            ([?\s-r] . hydra-exwm-move-resize/body)

            ;; Move between windows
            ([s-left] . windmove-left)
            ([s-right] . windmove-right)
            ([s-up] . windmove-up)
            ([s-down] . windmove-down)

            ;; Launch applications via shell command
            ([?\s-&] . (lambda (command)
                         (interactive (list (read-shell-command "$ ")))
                         (start-process-shell-command command nil command)))

            ;; Switch workspace
            ([?\s-w] . exwm-workspace-switch)
            ([?\s-`] . (lambda () (interactive) (exwm-workspace-switch-create 0)))

            ;; 's-N': Switch to certain workspace with Super (Win) plus a number key (0 - 9)
            ,@(mapcar (lambda (i)
                        `(,(kbd (format "s-%d" i)) .
                          (lambda ()
                            (interactive)
                            (exwm-workspace-switch-create ,i))))
                      (number-sequence 0 9))))

    (exwm-input-set-key (kbd "s-SPC") 'app-launcher-run-app)
    (exwm-input-set-key (kbd "<s-return>") 'vterm)
    (exwm-input-set-key (kbd "s-f") 'exwm-layout-toggle-fullscreen)


    ;; This next function integrates slock, a suckless screen locker utility, into =EXWM=.
    ;; I copied this snippet from Rasendubi's configuration
    ;; (https://github.com/rasendubi/dotfiles#slock).

    (defun mb/blank-screen ()
      "Blank screen after 1 second. The delay is introduced so the user
      could get their hands away from the keyboard. Otherwise, the screen
      would lit again immediately."
      (interactive)
      (run-at-time "1 sec" nil
                   (lambda ()
                     (efs/run-in-background "xset dpms force off"))))

    (defun mb/lock-screen ()
      "Lock and blank screen."
      (interactive)
      (efs/run-in-background "slock")
      (mb/blank-screen))

    ;; Super + l locks screen
    (exwm-input-set-key (kbd "s-M-l") #'mb/lock-screen)

    (exwm-enable))

#+end_src

** Desktop Environment

We use the [[https://github.com/DamienCassou/desktop-environment][desktop-environment]] package to automatically bind to well-known programs for controlling the volume, screen brightness, media playback, and doing other things like locking the screen and taking screenshots.  Make sure that you install the necessary programs to make this functionality work!  Check the [[https://github.com/DamienCassou/desktop-environment#default-configuration][default programs]] list to know what you need to install.

#+begin_src emacs-lisp :tangle .emacs.d/lisp/mb-desktop.el

  (use-package desktop-environment
    :straight t
    :after exwm
    :config (desktop-environment-mode)
    :custom
    (desktop-environment-brightness-small-increment "2%+")
    (desktop-environment-brightness-small-decrement "2%-")
    (desktop-environment-brightness-normal-increment "5%+")
    (desktop-environment-brightness-normal-decrement "5%-"))

#+end_src

* Panel with Polybar

I use [[https://github.com/polybar/polybar][Polybar]] to display a panel at the top of the primary screen to display my current EXWM workspace, CPU usage and temperature, battery status, time, and system tray. It uses some custom hooks back into Emacs via =emacsclient=.

Check out the Polybar wiki for more details on how to configure it: https://github.com/polybar/polybar/wiki

** Helper Functions

#+begin_src emacs-lisp :tangle .emacs.d/lisp/mb-desktop.el

  (defvar efs/polybar-process nil
    "Holds the process of the running Polybar instance, if any")

  (defun efs/kill-panel ()
    (interactive)
    (when efs/polybar-process
      (ignore-errors
        (kill-process efs/polybar-process)))
    (setq efs/polybar-process nil))

  (defun efs/start-panel ()
    (interactive)
    (efs/kill-panel)
    (setq efs/polybar-process (start-process-shell-command "polybar" nil "polybar panel")))

  (defun efs/send-polybar-hook (module-name hook-index)
    (start-process-shell-command "polybar-msg" nil (format "polybar-msg hook %s %s" module-name hook-index)))

  (defun efs/send-polybar-exwm-workspace ()
    (efs/send-polybar-hook "exwm-workspace" 1))

  (defun dw/polybar-exwm-workspace ()
    (pcase exwm-workspace-current-index
      (0 "")
      (1 "")
      (2 "")
      (3 "")
      (4 "")))

  (defun dw/update-polybar-exwm ()
    (efs/send-polybar-hook "exwm" 1))

  ;; Update panel indicator when workspace changes
  (add-hook 'exwm-workspace-switch-hook #'dw/update-polybar-exwm)
  ;; (add-hook 'exwm-workspace-switch-hook #'efs/send-polybar-exwm-workspace)

#+end_src

** Panel Configuration

The configuration for our ingeniously named panel, "panel".  Invoke it with =polybar panel= on the command line!

#+name: height
#+begin_src emacs-lisp
  (if (string= (system-name) "wheeler")
      (* 1024 156) ;; Wheeler/laptop
    (* 1024 96)) ;; Hopper/desktop
#+end_src

*.config/polybar/config:*

#+begin_src conf :tangle .config/polybar/config :mkdirp yes :noweb yes

  ; Docs: https://github.com/polybar/polybar
  ;==========================================================

  [settings]
  screenchange-reload = true

  [global/wm]
  margin-top = 0
  margin-bottom = 0

  [colors]
  background = #f0232635
  background-alt = #576075
  foreground = #A6Accd
  foreground-alt = #555
  primary = #ffb52a
  secondary = #e60053
  alert = #bd2c40
  underline-1 = #c792ea
  ;; underline-1 = #0BB5FF ;; Blue

  [bar/panel]
  width = 100%
  height = 30
  offset-x = 0
  offset-y = 0
  fixed-center = true
  enable-ipc = true

  background = ${colors.background}
  foreground = ${colors.foreground}

  line-size = 2
  line-color = #f00

  border-size = 0
  border-color = #00000000

  padding-top = 5
  padding-left = 1
  padding-right = 1

  module-margin = 1

  font-0 = "Cantarell:size=10:weight=bold;2"
  font-1 = "Font Awesome:size=12;2"
  font-2 = "Material Icons:size=12;5"
  font-3 = "Fira Mono:size=6;-3"

  modules-left = exwm
  modules-center = spotify
  modules-right = cpu temperature battery date

  tray-position = right
  tray-padding = 2
  tray-maxsize = 28

  cursor-click = pointer
  cursor-scroll = ns-resize

  [module/exwm]
  type = custom/ipc
  hook-0 = emacsclient -e "(dw/polybar-exwm-workspace)" | sed -e 's/^"//' -e 's/"$//'
  ;; hook-0 = emacsclient -e "exwm-workspace-current-index" | sed -e 's/^"//' -e 's/"$//'
  initial = 1
  format-underline = ${colors.underline-1}
  format-background = ${colors.background-alt}
  format-padding = 1

  [module/spotify]
  type = custom/script
  exec = ~/.config/polybar/player-status.sh
  interval = 3

  [module/cpu]
  type = internal/cpu
  interval = 2
  format = <label> <ramp-coreload>
  format-underline = ${colors.underline-1}
  click-left = emacsclient -e "(proced)"
  label = %percentage:2%%
  ramp-coreload-spacing = 0
  ramp-coreload-0 = ▁
  ramp-coreload-0-foreground = ${colors.foreground-alt}
  ramp-coreload-1 = ▂
  ramp-coreload-2 = ▃
  ramp-coreload-3 = ▄
  ramp-coreload-4 = ▅
  ramp-coreload-5 = ▆
  ramp-coreload-6 = ▇

  [module/memory]
  type = internal/memory
  interval = 2
  format-prefix = "M:"
  format-prefix-foreground = ${colors.foreground-alt}
  format-underline = ${colors.underline-1}
  label = %percentage_used%%

  [module/date]
  type = internal/date
  interval = 5

  date = "W%U: %a %b %e"
  date-alt = "%A %B %d %Y"

  time = %H:%M
  time-alt = %H:%M:%S

  format-prefix-foreground = ${colors.foreground-alt}
  format-underline = ${colors.underline-1}

  label = %date% %time%

  [module/battery]
  type = internal/battery
  battery = BAT0
  adapter = ADP1
  full-at = 98
  time-format = %-l:%M

  label-charging = %percentage%% / %time%
  format-charging = <animation-charging> <label-charging>
  format-charging-underline = ${colors.underline-1}

  label-discharging = %percentage%% / %time%
  format-discharging = <ramp-capacity> <label-discharging>
  format-discharging-underline = ${self.format-charging-underline}

  format-full = <ramp-capacity> <label-full>
  format-full-underline = ${self.format-charging-underline}

  ramp-capacity-0 = 
  ramp-capacity-1 = 
  ramp-capacity-2 = 
  ramp-capacity-3 = 
  ramp-capacity-4 = 

  animation-charging-0 = 
  animation-charging-1 = 
  animation-charging-2 = 
  animation-charging-3 = 
  animation-charging-4 = 
  animation-charging-framerate = 750

  [module/temperature]
  type = internal/temperature
  thermal-zone = 0
  warn-temperature = 60

  format = <label>
  format-underline = ${colors.underline-1}
  format-warn = <label-warn>
  format-warn-underline = ${self.format-underline}

  label = %temperature-c%
  label-warn = %temperature-c%!
  label-warn-foreground = ${colors.secondary}

#+end_src

** Spotify script

David Wilson created a simple script to grab Spotify player information using =playerctl=:

*.config/polybar/player-status.sh:*

#+begin_src sh :tangle .config/polybar/player-status.sh :shebang #!/bin/sh

  status="$(playerctl -p spotify status 2>&1)"
  if [ "$status" != "No players found" ]
  then
      artist="$(playerctl -p spotify metadata artist)"
      if [ "$artist" != "" ]
      then
          echo " $(playerctl -p spotify metadata artist) - $(playerctl -p spotify metadata title)"
      else
          # Clear any string that was previously displayed
          echo ""
      fi
  else
      # Clear any string that was previously displayed
      echo ""
  fi

#+end_src
* Desktop Notifications with Dunst

We use an application called [[https://dunst-project.org/][Dunst]] to enable the display of desktop notifications from Emacs and other applications running within EXWM.  Consult the [[https://dunst-project.org/documentation/][documentation]] for more details on how to configure this to your liking!

Here are some things you might want to consider changing:

- =format= - Customize how notification text contents are displayed
- =geometry= - Where the notification appears and how large it should be by default
- =urgency_normal=, etc - configures the background and frame color for notifications of different types
- =max_icon_size= - Constrain icon display since some icons will be larger than others
- =icon_path= - Important if your icons are not in a common location (like when using GNU Guix)
- =idle_threshold= - Wait for user to become active for this long before hiding notifications
- =mouse_left/right/middle_click= - Action to take when clicking a notification
- Any of the key bindings in the =shortcuts= section (though these are deprecated in 1.5.0, use =dunstctl=)

*.config/dunst/dunstrc:*

#+begin_src conf :tangle .config/dunst/dunstrc :mkdirp yes :noweb yes

  [global]
  ### Display ###
  monitor = 0

  # The geometry of the window:
  #   [{width}]x{height}[+/-{x}+/-{y}]
  geometry = "500x10-10+50"

  # Show how many messages are currently hidden (because of geometry).
  indicate_hidden = yes

  # Shrink window if it's smaller than the width.  Will be ignored if
  # width is 0.
  shrink = no

  # The transparency of the window.  Range: [0; 100].
  transparency = 10

  # The height of the entire notification.  If the height is smaller
  # than the font height and padding combined, it will be raised
  # to the font height and padding.
  notification_height = 0

  # Draw a line of "separator_height" pixel height between two
  # notifications.
  # Set to 0 to disable.
  separator_height = 1
  separator_color = frame

  # Padding between text and separator.
  padding = 8

  # Horizontal padding.
  horizontal_padding = 8

  # Defines width in pixels of frame around the notification window.
  # Set to 0 to disable.
  frame_width = 2

  # Defines color of the frame around the notification window.
  frame_color = "#89AAEB"

  # Sort messages by urgency.
  sort = yes

  # Don't remove messages, if the user is idle (no mouse or keyboard input)
  # for longer than idle_threshold seconds.
  idle_threshold = 120

  ### Text ###

  font = Cantarell 10

  # The spacing between lines.  If the height is smaller than the
  # font height, it will get raised to the font height.
  line_height = 0
  markup = full

  # The format of the message.  Possible variables are:
  #   %a  appname
  #   %s  summary
  #   %b  body
  #   %i  iconname (including its path)
  #   %I  iconname (without its path)
  #   %p  progress value if set ([  0%] to [100%]) or nothing
  #   %n  progress value if set without any extra characters
  #   %%  Literal %
  # Markup is allowed
  format = "<b>%s</b>\n%b"

  # Alignment of message text.
  # Possible values are "left", "center" and "right".
  alignment = left

  # Show age of message if message is older than show_age_threshold
  # seconds.
  # Set to -1 to disable.
  show_age_threshold = 60

  # Split notifications into multiple lines if they don't fit into
  # geometry.
  word_wrap = yes

  # When word_wrap is set to no, specify where to make an ellipsis in long lines.
  # Possible values are "start", "middle" and "end".
  ellipsize = middle

  # Ignore newlines '\n' in notifications.
  ignore_newline = no

  # Stack together notifications with the same content
  stack_duplicates = true

  # Hide the count of stacked notifications with the same content
  hide_duplicate_count = false

  # Display indicators for URLs (U) and actions (A).
  show_indicators = yes

  ### Icons ###

  # Align icons left/right/off
  icon_position = left

  # Scale larger icons down to this size, set to 0 to disable
  max_icon_size = 75

  # Paths to default icons.
  # icon_path = /home/mark/.guix-extra-profiles/desktop/desktop/share/icons/gnome/256x256/status/:/home/mark/.guix-extra-profiles/desktop/desktop/share/icons/gnome/256x256/devices/:/home/mark/.guix-extra-profiles/desktop/desktop/share/icons/gnome/256x256/emblems/

  ### History ###

  # Should a notification popped up from history be sticky or timeout
  # as if it would normally do.
  sticky_history = no

  # Maximum amount of notifications kept in history
  history_length = 20

  ### Misc/Advanced ###

  # Browser for opening urls in context menu.
  browser = qutebrowser

  # Always run rule-defined scripts, even if the notification is suppressed
  always_run_script = true

  # Define the title of the windows spawned by dunst
  title = Dunst

  # Define the class of the windows spawned by dunst
  class = Dunst

  startup_notification = false
  verbosity = mesg

  # Define the corner radius of the notification window
  # in pixel size. If the radius is 0, you have no rounded
  # corners.
  # The radius will be automatically lowered if it exceeds half of the
  # notification height to avoid clipping text and/or icons.
  corner_radius = 4

  mouse_left_click = close_current
  mouse_middle_click = do_action
  mouse_right_click = close_all

  # Experimental features that may or may not work correctly. Do not expect them
  # to have a consistent behaviour across releases.
  [experimental]
  # Calculate the dpi to use on a per-monitor basis.
  # If this setting is enabled the Xft.dpi value will be ignored and instead
  # dunst will attempt to calculate an appropriate dpi value for each monitor
  # using the resolution and physical size. This might be useful in setups
  # where there are multiple screens with very different dpi values.
  per_monitor_dpi = false

  [shortcuts]

  # Shortcuts are specified as [modifier+][modifier+]...key
  # Available modifiers are "ctrl", "mod1" (the alt-key), "mod2",
  # "mod3" and "mod4" (windows-key).
  # Xev might be helpful to find names for keys.
  # Close notification.
  #close = ctrl+space

  # Close all notifications.
  #close_all = ctrl+shift+space

  # Redisplay last message(s).
  # On the US keyboard layout "grave" is normally above TAB and left
  # of "1". Make sure this key actually exists on your keyboard layout,
  # e.g. check output of 'xmodmap -pke'
  history = ctrl+grave

  # Context menu.
  context = ctrl+shift+period

  [urgency_low]
  # IMPORTANT: colors have to be defined in quotation marks.
  # Otherwise the "#" and following would be interpreted as a comment.
  background = "#222222"
  foreground = "#888888"
  timeout = 10
  # Icon for notifications with low urgency, uncomment to enable
  #icon = /path/to/icon

  [urgency_normal]
  background = "#1c1f26"
  foreground = "#ffffff"
  timeout = 10
  # Icon for notifications with normal urgency, uncomment to enable
  #icon = /path/to/icon

  [urgency_critical]
  background = "#900000"
  foreground = "#ffffff"
  frame_color = "#ff0000"
  timeout = 0
  # Icon for notifications with critical urgency, uncomment to enable
  #icon = /path/to/icon

#+end_src

*Arch Packages*

The following packages are needed:

- dunst + libnotify
- *AUR* polybar
* Default Applications

The file =.config/mimeapps.list= configures default applications for various content types.  Right now I'm using it to control which browser opens URLs from other applications.

#+begin_src conf :tangle .config/mimeapps.list

  [Default Applications]
  text/html=qutebrowser.desktop
  x-scheme-handler/http=qutebrowser.desktop
  x-scheme-handler/https=qutebrowser.desktop
  x-scheme-handler/about=qutebrowser.desktop
  x-scheme-handler/unknown=qutebrowser.desktop

#+end_src
* Applications
** Qutebrowser

[[https://github.com/qutebrowser/qutebrowser][Qutebrowser]] is a great keyboard-centric browser which uses the Chromium rendering engine via QT 5's WebEngine component. One thing I like about this browser is that it does a much better job of remembering what windows you had open when it exits so that you can maintain your session more easily.  I also like that when you reopen a tab/window, the history of that window is still present.

*** Configuration

#+begin_src python :tangle .config/qutebrowser/config.py :mkdirp yes :noweb yes

  # Open every tab as a new window, Vimb style
  # c.tabs.tabs_are_windows = True
  # c.tabs.show = "multiple"
  c.tabs.last_close = "close"

  c.auto_save.session = True
  c.scrolling.smooth = True
  c.session.lazy_restore = True
  c.content.autoplay = False

  # Scale pages and UI better for hidpi
  c.zoom.default = "100%"
  c.fonts.hints = "bold 20pt monospace"

  # Better default fonts
  c.fonts.web.family.standard = "Bitstream Vera Sans"
  c.fonts.web.family.serif = "Bitstream Vera Serif"
  c.fonts.web.family.sans_serif = "Bitstream Vera Sans"
  c.fonts.web.family.fixed = "Fira Mono"
  c.fonts.statusbar = "12pt Cantarell"

  # Use dark mode where possible
  #c.colors.webpage.darkmode.enabled = True
  #c.colors.webpage.darkmode.policy.images = "never"
  #c.colors.webpage.bg = "black"

  # Automatically turn on insert mode when a loaded page focuses a text field
  # c.input.insert_mode.auto_load = True

  # Edit fields in Emacs with Ctrl+E
  c.editor.command = ["emacsclient", "+{line}:{column}", "{file}"]

  # Make Ctrl+g quit everything like in Emacs
  config.bind('<Ctrl-g>', 'leave-mode', mode='insert')
  config.bind('<Ctrl-g>', 'leave-mode', mode='command')
  config.bind('<Ctrl-g>', 'leave-mode', mode='prompt')
  config.bind('<Ctrl-g>', 'leave-mode', mode='hint')

  # Tweak some keybindings
  # config.unbind('d') # Don't close window on lower-case 'd'
  config.bind('yy', 'yank')

  # Vim-style movement keys in command mode
  config.bind('<Ctrl-j>', 'completion-item-focus --history next', mode='command')
  config.bind('<Ctrl-k>', 'completion-item-focus --history prev', mode='command')

  # More binding hints here: https://gitlab.com/Kaligule/qutebrowser-emacs-config/blob/master/config.py
  # Search Machines
  c.url.searchengines = {'DEFAULT': 'https://duckduckgo.com/?q={}',
                         'g': 'https://google.com/search?q={}',
                         'r': 'https://reddit.com/r/{}',
                         "osm": "https://www.openstreetmap.org/search?query={}",
                         }

  # Load the autoconfig file (quteconfig.py)
  config.load_autoconfig()

#+end_src

*** Quickmarks

Here I define my =quickmarks=, I should really update them!

#+begin_src conf :tangle .config/qutebrowser/quickmarks :mkdirp yes
  gg  https://www.google.com
  nos https://www.nos.nl
  fm  https://www.nederland.fm
  sp  https://open.spotify.com/
  na  http://192.168.178.53:5000
  hp  https://www.hpdetijd.nl/
  sc  https://systemcrafters.cc/
  gtd https://github.com/rougier/emacs-gtd
  fed https://github.com/davidstrauss/desktop-configuration
#+end_src

** Flatpak

I use Flatpak and the [[https://flathub.org/home][Flathub]] repository to install applications that are otherwise difficult to install in Guix because of application frameworks, etc.

*Applications to Install*

#+begin_src sh

  flatpak remote-add --user --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo
  flatpak remote-add --user --if-not-exists flathub-beta https://flathub.org/beta-repo/flathub-beta.flatpakrepo

  # Install Spotify
  flatpak install --user flathub com.spotify.Client

  # Install Firefox
  flatpak install flathub org.mozilla.firefox

#+end_src

*Arch Packages*

flatpak

* Notes

** Bluetooth Setup

Stolen from David Wilson's config, I defined two functions to automatically connect to either my home speaker or Galaxy Buds+.

#+begin_src emacs-lisp :tangle .emacs.d/lisp/mb-desktop.el

  (defun mb/bluetooth-connect-Edifier ()
    (interactive)
    (start-process-shell-command "bluetoothctl" nil "bluetoothctl -- connect 40:EF:4C:94:F6:B9"))

  (defun mb/bluetooth-connect-Buds ()
    (interactive)
    (start-process-shell-command "bluetoothctl" nil "bluetoothctl -- connect 18:54:CF:10:DB:85"))

  (defun mb/bluetooth-disconnect ()
    (interactive)
    (start-process-shell-command "bluetoothctl" nil "bluetoothctl -- disconnect"))

#+end_src

If you need to manually connect to Bluetooth audio devices using =bluetoothctl=,
as I currently do in Guix, you'll need to enter these commands at the
=bluetoothctl= prompt:

#+begin_src shell

  system-alias "my-hostname" # To configure your laptop's device name
  default-agent
  power on
  scan on
  # Wait for your device to appear
  pair 40:EF:4C:94:F6:B9
  trust 04:52:C7:5E:5C:A8 # To enable auto-connect
  connect 40:EF:4C:94:F6:B9

#+end_src
* Provide the mb-desktop package

#+begin_src emacs-lisp :tangle .emacs.d/lisp/mb-desktop.el

  (provide 'mb-desktop)

#+end_src
